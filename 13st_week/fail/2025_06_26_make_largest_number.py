# Q. 큰 수 만들기

# <풀이>
# number 가 1,000,000 개니까 permutations 못씀
# -> 한 번의 순회 안에서 풀어내야 한다
# k개까지 뽑아낼 수 있고, 앞 자리가 가장 커야 유리하다
# stack 에다가 담으면서 [-1] 보다 큰 수 나오면
# stack에 있는 것 제거하면서 k개 -1 처리해주고
# stack에 새로운 수 담아주기
# 진행한다면,
# 1
# 9 (9가 1을 지우고 들어감) k -= 1
# 92 (2는 그대로 들어감)
# 94 (4가 2를 지우고 들어감) k -= 1
# 모두 순회했는데 만약 k가 남았다면?
# stack에서 k개 만큼 지워야 함

def solution(number, k):
    stack = []
    for num in number:
        while stack and num > stack[-1] and k > 0:
            stack.pop()
            k -= 1
        stack.append(num)

    if k > 0:
        while k > 0:
            k -= 1
            stack.pop()

    return ''.join(stack)

# <피드백>
# 지금 선택이 다음 선택에 영향을 끼치는 문제인가? -> 아니다 = dp 로 풀 수 없다

# 탐욕법 -> 지금 시점의 최선의 선택이 전체의 최선
# 1924라는 숫자를 봤을 때 범위 상(1,000,000) 한 번의 순회만 가능하므로
# 1부터 차례대로 보면서 가장 큰 수를 만들어 줘야 한다
# 9 (9가 1을 지우고 들어감) k -= 1
# 92 (2는 그대로 들어감)
# 94 (4가 2를 지우고 들어감) k -= 1

# 또한 위 작업에서는 큰 수를 앞으로 밀어넣는 행위만 하고 있으므로
# 모두 순회했는데 k가 남아 있는 상황이 생길 수 있다
# 남은 k개에 대한 처리도 해줘야 한다

# 보통 범위가 큰데 탐색이 필요하면 stack 등의 자료구조를 이용해서 기록을 해놔야 한다
