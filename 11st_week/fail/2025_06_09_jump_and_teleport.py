# Q. 점프와 순간이동

# <문제분석>
# 1. 한 번에 K칸을 앞으로 점프 - K만큼의 건전지 사용량
# 2. (현재까지 온 거리) X 2 에 해당하는 위치로 순간이동 - 건전지 사용량 없음
# 순간 이동하는 게 더 효율적이다

# 거리가 N만큼 떨어져 있는 장소로 가려고 한다
# *단 건전지 사용량을 줄이기 위해 점프로 이동하는 것은 최소로 하려고 한다

# 거리 N 주어졌을 때 사용해야 하는 건전지 사용량의 최솟값을 return

# ex. 거리가 5라면
# 경우의 수는 여러가지
# 처음 위치 0에서 1칸 점프한 다음 순간이동 하면
# 위치 2로 이동하고 이때 다시 순간이동해서 4로 이동한 다음
# 점프하면 건전지 사용량 2

# 풀이
# 점프 - K만큼 이동할 수 있고 K만큼 건전지 사용량
# 순간이동 - 현재위치 x 2로 이동할 수 있고 사용량 없음
# 1 <= N <= 10억

# 순간이동 1 -> 2 -> 4 -> 8 -> 16 -> 32
# 어떤 선택이 어떤 경우에 이득인지 모른다
# 거리 달성까지 2가지 방법으로 모두 구하기

# 짝수면 순간이동의 결과이므로 /2
# 홀수면 점프해서 만든 거리이므로 -K
# N부터 0까지로 생각한다면 N을 이진으로 만들어서 처리 가능

# 이진법 이용해서 1인 것(홀수) 카운트하면 그게 점프의 횟수

def solution(n):
    return bin(n).count('1')

# <피드백>
# 홀수냐 짝수냐에 따라 방법을 결정
# n을 2로 나누면서 매 순간 홀수인지 짝수인지 판별 가능
# 홀수인 지점만 체크(K는 항상 1로 본다)