# Q. n^2 배열 자르기
#
# 문제 설명
# 정수 n, left, right가 주어집니다. 다음 과정을 거쳐서 1차원 배열을 만들고자 합니다.
#
# n행 n열 크기의 비어있는 2차원 배열을 만듭니다.
# i = 1, 2, 3, ..., n에 대해서, 다음 과정을 반복합니다.
# 1행 1열부터 i행 i열까지의 영역 내의 모든 빈 칸을 숫자 i로 채웁니다.
# 1행, 2행, ..., n행을 잘라내어 모두 이어붙인 새로운 1차원 배열을 만듭니다.
# 새로운 1차원 배열을 arr이라 할 때, arr[left], arr[left+1], ..., arr[right]만 남기고 나머지는 지웁니다.
# 정수 n, left, right가 매개변수로 주어집니다. 주어진 과정대로 만들어진 1차원 배열을 return 하도록 solution 함수를 완성해주세요.
#
# 제한사항
# 1 ≤ n ≤ 107
# 0 ≤ left ≤ right < n2
# right - left < 105
# 입출력 예
# n	left	right	result
# 3	2	5	[3,2,2,3]
# 4	7	14	[4,3,3,3,4,4,4,4]

# <풀이>
# n의 범위가 너무 커서 직접 for 문 돌면서 만들어서 할 수 없다.
# 전체 배열은 n x n 크기의 2차원 배열을 1차원으로 펼친 것
# 2차원 <-> 1차원 인덱스는 다음 공식을 따름
# 2차원 row = 1차원 i번째 // 길이 n (행은 몫)
# 2차원 col = 1차원 i번째 % 길이 n (열은 나머지)

# <피드백>
# i=0 → 1행: [1,2,3,4]
# i=1 → 2행: [2,2,3,4]
# i=2 → 3행: [3,3,3,4]
# i=3 → 4행: [4,4,4,4]

# <문제분석>
# 정수 n. left, right
# 1차원 배열 만들기
# 1. n행 n열의 비어있는 2차원 배열 만든다
# 2. i = 1, 2, 3, ..., n에 대해서
# 1행 1열부터 i행 i열까지 모든 빈 칸을 숫자 i로 채운다
# 3. 1행, 2행, ..., n행 잘라서 모두 이어붙여 새로운 1차원 배열 만든다
# arr[left], arr[left + 1] ~ arr[right] 만 남기고 지운다

# <풀이>
# 2차원 -> 1차원 전환
# 1 2 3
# 4 5 6
# 7 8 9
# -> [0, 0] -> [0]
# -> [0, 1] -> [1]   0 * 3 + 1 / 3 = 1
# -> [0, 2] -> [2]
# -> [1, 0] -> [3]
# -> [1, 1] -> [4]
# -> [1, 2] -> [5]   1 * 3 + 2 / 3 = 5
# -> [2, 0] -> [6]   2 * 3 + 0 / 3 = 6
# -> [2, 1] -> [7]   2 * 3 + 1 / 3
# -> [2, 2] -> [8]   2 * 3 + 2 / 3
# => 2차원 행 * n + 열 / n = 1차원 인덱스
# => 1차원 인덱스 = 인덱스 / n , 인덱스 % n

# def solution1(n, left, right):
#     answer = []
#
#     # 2차원 배열 만들기
#     # 1 2 3 4
#     # 2 2 3 4
#     # 3 3 3 4
#     # 4 4 4 4
#     arr = [[[0] for _ in range(n)] for _ in range(n)]
#     i = 1
#     visited = set()
#     while i <= n:
#         for idx in range(i):
#             for jdx in range(i):
#                 if (idx, jdx) not in visited:
#                     visited.add((idx, jdx))
#                     arr[idx][jdx] = i
#         i += 1
#
#     # 1차원에서 2차원 값 바로 꺼내기
#     for i in range(left, right + 1):
#         # 1차원 인덱스 = 인덱스 / n , 인덱스 % n
#         answer.append(arr[i // n][i % n])
#
#     return answer

def solution(n, left, right):
    answer = []

    for i in range(left, right + 1):  # left 부터 right 까지
        row = i // n
        col = i % n
        answer.append(max(row, col) + 1) # 더 큰 값

    return answer

# *2차원 배열을 직접 만드는건 n의 범위 때문에 불가능하다
# 1 2 3
# 2 2 3
# 3 3 3
# -> max(row, col) + 1    = 행과 열중 큰 값 + 1

# 2차원 <-> 1차원 일때
# 2차원의 행과 열 인덱스는 1차원 인덱스 // 2차원 길이, 1차원 인덱스 % 2차원 길이 이다
# 즉 행열은 몫과 나머지 이다