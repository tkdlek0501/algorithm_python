# Q. 수평 직선에 탑 N대를 세웠습니다. 모든 탑의 꼭대기에는 신호를 송/수신하는 장치를 설치했습니다.
# 발사한 신호는 신호를 보낸 탑보다 높은 탑에서만 수신합니다.
# 또한 ,한 번 수신된 신호는 다른 탑으로 송신되지 않습니다.
#
# 예를 들어 높이가 6, 9, 5, 7, 4 인 다섯 탑이 왼쪽으로 동시에 레이저 신호를 발사합니다.
# 그러면, 탑은 다음과 같이 신호를 주고 받습니다.
#
# 높이가 4인 다섯 번째 탑에서 발사한 신호는 높이가 7인 네 번째 탑에서 수신하고,
# 높이가 7인 네 번째 탑의 신호는 높이가 9인 두 번째 탑이,
# 높이가 5인 세 번째 탑의 신호도 높이가 9인 두 번째 탑이 수신합니다.
#
# 높이가 9인 두 번째 탑과 높이가 6인 첫 번째 탑이 보낸 레이저 신호는
# 어떤 탑에서도 수신할 수 없습니다.
#
# 이 때, 맨 왼쪽부터 순서대로 탑의 높이를 담은 배열 heights가 매개변수로 주어질 때
# 각 탑이 쏜 신호를 어느 탑에서 받았는지 기록한 배열을 반환하시오.
# 만약 신호를 수신하는 탑이 없으면 0으로 표시합니다.

# 문제 분석
# 1. 탑 N 대가 있음 꼭대기에 신호 송/수신기 있음
# 2. 신호를 보낸 탑보다 높은 탑에서만 수신할 수 있음
# 3. 한 번 수신되면 다른 탑으로 송신 안됨
# 4. 왼쪽으로 레이저가 나감
# 5. ex. [6, 9, 5, 7, 4] 로 주어지면
#   4 송신 -> 7 수신
#   7 송신 -> 9 수신
#   5 송신 -> 9 수신
# 6. 9와 6인 탑은 수신되는 탑이 없음
# 7. 신호 수신하지 못한다면 0으로 표시

# 아이디어
# 1. 높이로 비교, 자기 보다 왼쪽에 있는 값들 중 큰 값이 있으면 걔가 수신하는 탑이다
# 인덱스 0 1 2 3 4
# 4번 째 탑은 3번 째 부터 시작해서 계속 자기보다 큰 지 검사해야 한다
# 큰 값이 없으면 0으로 반환해야 한다
# 4번째는 3, 2, 1, 0 순
# 3번째는 2, 1, 0
# 2번째는 1, 0
# 1번째는 0
# 0번째는 없음

# 즉 오른쪽 탑 부터 맨 왼쪽 탑까지(4, 0, -1)
# 어떤 탑이 받는지 보려면 range(4 - 1, 0, -1)
# for i in range(4, 0, -1) # 0번째 탑은 제외
#   for j in range(4 - 1, -1, -1)

top_heights = [6, 9, 5, 7, 4]

# O(N^2)
def get_receiver_top_orders(heights):
    answer = [0] * len(heights) # 아무것도 받지 못한다면 0이라는 조건이 있으므로 기본값 세팅을 해준다

    for i in range(len(heights) - 1, 0, -1):
        for j in range(i - 1, -1, -1):
            if heights[i] <= heights[j]: # 크면 받아주는 거
                answer[i] = j + 1 # 몇 번째 탑인지 표현하기 위해 자연수로
                break

    return answer


print(get_receiver_top_orders(top_heights))  # [0, 0, 2, 2, 4] 가 반환되어야 한다!

print("정답 = [0, 0, 2, 2, 4] / 현재 풀이 값 = ",get_receiver_top_orders([6,9,5,7,4]))
print("정답 = [0, 0, 0, 3, 3, 3, 6] / 현재 풀이 값 = ",get_receiver_top_orders([3,9,9,3,5,7,2]))
print("정답 = [0, 0, 2, 0, 0, 5, 6] / 현재 풀이 값 = ",get_receiver_top_orders([1,5,3,6,7,6,5]))